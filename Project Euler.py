#!/usr/bin/env python
# coding: utf-8

# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

# In[280]:


def p1(num):
    sum= 0
    for i in range(1, num):
        if (i%3 == 0) | (i%5 == 0):
            sum +=i
    return sum
p1(1000)


# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# In[281]:


def p2(target):
    first_num = 1
    second_num = 2
    new_num =0
    sum = 2
    while True:
        new_num = first_num + second_num
        if new_num >= target:
            break
        else:
            first_num = second_num
            second_num = new_num
            if new_num%2 == 0:
                sum += new_num
    return sum
p2(4*10**6)


# The prime factors of 13195 are 5, 7, 13 and 29.
# 
# What is the largest prime factor of the number 600851475143 ?

# In[282]:


import numpy as np
def p3(num):
    largest_prime = num
    for i in range(2, max(10000,int(np.sqrt(num)))):
        if num%i == 0:
            largest_prime = i
            while num%i == 0:
                num = num/i
            if num == 1:
                break
    return(largest_prime)
p3(600851475143)


# A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
# 
# Find the largest palindrome made from the product of two 3-digit numbers.

# In[283]:


def p4(target):
    S = []
    N1 = []
    N2 = []
    for first_num in range(target,int(target/100),-1):
        for second_num in range(target,int(target/100),-1):
            product = first_num * second_num
            if product - int(str(product)[::-1]) == 0:
                S.append(product)
                N1.append(first_num)
                N2.append(second_num)
    index = S.index(max(S))
    return max(S), N1[index], N2[index]
p4(999)


# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# 
# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

# In[284]:


import math
def lcm(x,y):
    return int(x*y/(math.gcd(x,y)))
def p5(target):
    numbers = list(range(1,target+1))
    solution = 1
    for i in numbers:
        solution = lcm(solution, i)
    return solution
p5(20)


# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

# In[285]:


def p6(target):
    sum1 = 0
    sum2 = 0
    for i in range(1,target+1):
        sum1 += i
        sum2 += i**2
    return sum1**2 - sum2
p6(100)


# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
# What is the 10001st prime number?

# In[335]:


def p7(target):
    primes=[2]
    next_num=3
    if target>len(primes):
        while len(primes)<=target:
            indicator=0
            for i in primes:
                if i>math.sqrt(next_num):
                    indicator=0 
                    break
                if next_num%i==0:
                    indicator=1
                    break
                    
            if(indicator==0):
                primes.append(next_num)
            next_num+=2
    return (primes[target-1])
p7(10001)


# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

# In[218]:


p8test ='7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
def p8(target):
    product = []
    for i in range(len(target)-13):
        slide = target[i:i+13]
        ans = 1
        for j in slide:
            ans *= int(j)
        product.append(ans)
    return max(product)


# There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# Find the product abc.

# In[408]:


def p9(target):
    if target <= 1:
        print('No Solution')
    else:
        for a in range(1,target):
            b = (target**2 - target*2*a)/(2*target-2*a)
            if int(b) == b:
                break
        if (a == target -1)|( b <=0):
            print('No solution')
        else:
            c = target -a -b
            print(int(a*b*c))
p9(1000)


# The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
# 
# Find the sum of all the primes below two million.

# In[453]:


def p10(target):
    list_prime = [True]*target
    summation = [0]*target
    list_prime[0] = list_prime[1] = False
    for i, isprime in enumerate(list_prime):
        if isprime:
            summation[i] = summation[i-1] + i
            for n in range(i*i, target, i):
                list_prime[n] = False
        else:
            summation[i] = summation[i-1]
    return summation[-1]
p10(2*10**6)


# The following iterative sequence is defined for the set of positive integers:
# 
# n → n/2 (n is even)
# n → 3n + 1 (n is odd)
# 
# Using the rule above and starting with 13, we generate the following sequence:
# 
# 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
# It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
# 
# Which starting number, under one million, produces the longest chain?
# 
# NOTE: Once the chain starts the terms are allowed to go above one million.

# In[32]:


def count_chain(n):
    if n in value:
        return value[n]
    if n%2 == 0:
        value[n] = 1 + count_chain(n/2)
    else:
        value[n] = 2 + count_chain((3*n+1)/2)
    return value[n]
def p14(target):
    value = {1:1}
    longest_chain = 0
    for number in range(9, target):
        if longest_chain < count_chain(number):
            longest_chain = count_chain(number)
            answer = number
    return answer, longest_chain
p14(10**6)    


# In[46]:


import math
def p15(n,k):
    return int(math.factorial(n+k)//(math.factorial(n)*math.factorial(k)))
p15(20,20)


# 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
# 
# What is the sum of the digits of the number 2^1000?

# In[48]:


def p16(target):
    string = str(target)
    sum = 0
    for i in string:
        sum += int(i)
    return sum
p16(2**1000)


# n! means n × (n − 1) × ... × 3 × 2 × 1
# 
# For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
# and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
# 
# Find the sum of the digits in the number 100!

# In[85]:


from math import factorial
def p20(target):
    string = str(factorial(target))
    sum = 0
    for i in string:
        sum +=int(i)
    return sum
p20(100)


# Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
# If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
# 
# For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
# 
# Evaluate the sum of all the amicable numbers under 10000.

# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[467]:


matrix = np.array([[8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8],
[49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0],
[81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65],
[52,70,95,23,4,60,11,42,69,24,68,56,1,32,56,71,37,2,36,91],
[22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80],
[24,47,32,60,99,3,45,2,44,75,33,53,78,36,84,20,35,17,12,50],
[32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70],
[67,26,20,68,2,62,12,20,95,63,94,39,63,8,40,91,66,49,94,21],
[24,55,58,5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72],
[21,36,23,9,75,0,76,44,20,45,35,14,0,61,33,97,34,31,33,95],
[78,17,53,28,22,75,31,67,15,94,3,80,4,62,16,14,9,53,56,92],
[16,39,5,42,96,35,31,47,55,58,88,24,0,17,54,24,36,29,85,57],
[86,56,0,48,35,71,89,7,5,44,44,37,44,60,21,58,51,54,17,58],
[19,80,81,68,5,94,47,69,28,73,92,13,86,52,17,77,4,89,55,40],
[4,52,8,83,97,35,99,16,7,97,57,32,16,26,26,79,33,27,98,66],
[88,36,68,87,57,62,20,72,3,46,33,67,46,55,12,32,63,93,53,69],
[4,42,16,73,38,25,39,11,24,94,72,18,8,46,29,32,40,62,76,36],
[20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,4,36,16],
[20,73,35,29,78,31,90,1,74,31,49,71,48,86,81,16,23,57,5,54],
[1,70,54,71,83,51,54,69,16,92,33,48,61,43,52,1,89,19,67,48]])


# In[ ]:




